@use "sass:list";
@import "variables";

// computes the list of valid neighbors at some coordinate
// including the coordinate itself
@function neighbors($i, $j) {
	$list: ();
	$list: append($list, ($i, $j));

	@if ($i > 1) {
		$list: append($list, ($i - 1, $j));
	}
	@if ($j > 1) {
		$list: append($list, ($i, $j - 1));
	}
	@if ($i < $size-x) {
		$list: append($list, ($i + 1, $j));
	}
	@if ($j < $size-y) {
		$list: append($list, ($i, $j + 1));
	}
	@return $list;
}

#game {
	@supports not (selector(:has(*))) {
		display: none;
	}

	// counter for lights
	$index: 0;

	// loop through all lights
	@for $i from 1 through $size-x {
		@for $j from 1 through $size-y {
			$index: $index + 1;

			// counter for neighbors of light
			$n: 0;

			// compute the state of the light:
			@each $neighbor in neighbors($i, $j) {
				$x: nth($neighbor, 1);
				$y: nth($neighbor, 2);
				$n: $n + 1;

				// add 1 modulo 2 when neighbor is checked
				&:has(#c#{$x}#{$y}:checked) {
					@if ($n == 1) {
						--s#{$i}#{$j}#{$n}: 0;
					} @else {
						--s#{$i}#{$j}#{$n}: calc(
							1 - var(--s#{$i}#{$j}#{$n - 1})
						);
					}
				}

				// add 0 modulo 2 when neighbor is not checked
				&:has(#c#{$x}#{$y}:not(:checked)) {
					@if ($n == 1) {
						--s#{$i}#{$j}#{$n}: 1;
					} @else {
						--s#{$i}#{$j}#{$n}: var(
							--s#{$i}#{$j}#{$n - 1}
						);
					}
				}
			}

			// state = total sum modulo 2
			--s#{$i}#{$j}: var(--s#{$i}#{$j}#{$n});

			// set label color according to state,
			// state = 0 becomes gray,
			// state = 1 becomes yellow
			label[for="c#{$i}#{$j}"] {
				background-color: hsl(
					60,
					calc(var(--s#{$i}#{$j}) * 100%),
					calc(30% + var(--s#{$i}#{$j}) * 30%)
				);
			}

			// compute the total sum of all states,
			// game is solved when all states = 0
			@if ($index > 1) {
				--total-#{$index}: calc(
					var(--total-#{$index - 1}) + var(--s#{$i}#{$j})
				);
			} @else {
				--total-#{$index}: var(--s#{$i}#{$j});
			}
		}
	}
}
